plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

// Configuration cache compatible approach - file content hash based
def getConfigValue(String id) {
    def configFile = file("src/main/res/values/config.xml")
    
    // Read file content and use it as cache key
    def fileContent = configFile.text
    def parser = new XmlParser()
    def config = parser.parseText(fileContent)
    return config.string.find { it.@name == id }?.text() ?: ""
}

android {
    namespace = 'com.vinaooo.revenger'
    compileSdk = 36               // Android 16 - API Level 36
    // buildToolsVersion removido - AGP 8.13.0 usa automaticamente 36.0.0

    defaultConfig {
        applicationId "com.vinaooo.revenger.${getConfigValue('config_id')}"
        minSdk 30                // Android 11 - API Level 30
        targetSdk 36             // Android 16 - API Level 36
        versionCode 1
        versionName '1.0'
        resConfigs 'en'
    }

    signingConfigs {
        debug {
            // mantenha apenas as configurações de keystore padrão
            storeFile file("${System.getProperty("user.home")}/.android/debug.keystore")
            storePassword 'android'
            keyAlias 'AndroidDebugKey'
            keyPassword 'android'
        }
        release {
            storeFile file("${rootProject.projectDir}/revenger.jks")
            storePassword 'ludere'
            keyAlias 'key0'
            keyPassword 'ludere'
        }
    }

    buildTypes {
        debug {
            debuggable = true         // Atributo, não método
            minifyEnabled = false
            shrinkResources = false
            signingConfig = signingConfigs.debug
        }
        release {
            minifyEnabled = false
            shrinkResources = false
            signingConfig = signingConfigs.release
        }
    }

    // Modern ABI configuration - remove splits block as it's disabled
    // splits.abi is deprecated in favor of bundle configuration


    buildFeatures {
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }
    kotlinOptions {
        jvmTarget = '21'
    }
}

// Modern task 100% compatible with configuration cache - no Gradle objects referenced
tasks.register('prepareCore') {
    doLast {
        // Get project directory without referencing Task.project
        def buildFile = new File(System.getProperty("user.dir"), "app/build.gradle")
        def projectDir = buildFile.parent.startsWith("/") ? new File(buildFile.parent) : new File(System.getProperty("user.dir"))
        
        // Read config at execution time - completely isolated
        def configPath = new File(projectDir, "src/main/res/values/config.xml")
        def parser = new XmlParser()
        def config = parser.parse(configPath)
        def configCore = config.string.find { it.@name == 'config_core' }?.text() ?: "genesis_plus_gx"
        
        def abis = ['x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a']
        
        abis.each { abi ->
            def jniAbiDir = new File(projectDir, "src/main/jniLibs/$abi")

            if (jniAbiDir.exists() && jniAbiDir.list().length > 0) {
                return
            }

            jniAbiDir.mkdirs()

            def zipFileName = "${configCore}_libretro_android.so.zip"
            def zipFile = new File(jniAbiDir, zipFileName)
            def downloadUrl = "https://buildbot.libretro.com/nightly/android/latest/$abi/$zipFileName"
            
            // Download using pure Java (configuration cache compatible)
            try {
                def url = new URL(downloadUrl)
                def connection = url.openConnection()
                connection.setRequestProperty("User-Agent", "Mozilla/5.0")
                connection.setConnectTimeout(30000)
                connection.setReadTimeout(60000)
                
                zipFile.bytes = connection.inputStream.bytes
                project.logger.info("Downloaded: {} for {}", zipFileName, abi)
                
                // Extract using Java ZipFile instead of ant
                def zip = new java.util.zip.ZipFile(zipFile)
                def soFileName = "${configCore}_libretro_android.so"
                def entry = zip.getEntry(soFileName)
                
                if (entry != null) {
                    def targetFile = new File(jniAbiDir, "libcore.so")
                    targetFile.bytes = zip.getInputStream(entry).bytes
                    project.logger.info("Extracted and renamed to libcore.so for {}", abi)
                } else {
                    project.logger.warn("Warning: {} not found in zip for {}", soFileName, abi)
                }
                
                zip.close()
                zipFile.delete()
                
            } catch (Exception e) {
                project.logger.warn("Warning: Failed to download {} - {}", downloadUrl, e.message)
                // Continue with other ABIs
            }
        }
    }
}

tasks.named('preBuild') {
    dependsOn('prepareCore')
}

dependencies {
    // Remove dependência em fileTree - modern approach
    implementation "org.jetbrains.kotlin:kotlin-stdlib:2.2.20"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2'

    // AndroidX Core - Atualizada
    implementation 'androidx.core:core-ktx:1.17.0'
    implementation 'androidx.appcompat:appcompat:1.7.1'

    // Activity e Lifecycle - Versões mais recentes
    implementation 'androidx.activity:activity-ktx:1.11.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.9.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.9.4'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.9.4'

    // RadialGamePad - Modern version with Kotlin Flow support
    implementation 'com.github.swordfish90:radialgamepad:2.0.0'
    implementation 'com.github.swordfish90:libretrodroid:0.12.0'

    // RxJava 3 - Latest versions
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.2'
    implementation 'io.reactivex.rxjava3:rxjava:3.1.8'
    
    // Material Design Components - Latest version
    implementation 'com.google.android.material:material:1.12.0'
}
