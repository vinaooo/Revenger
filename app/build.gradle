plugins {
    id('com.android.application')
    id('kotlin-android')
}

/**
 * Função moderna para leitura de configurações XML
 * Substitui configValue com melhor tratamento de erros e logging
 */
def getConfigValue = { String id ->
    try {
        def configFile = file("${rootProject.projectDir.path}/app/src/main/res/values/config.xml")
        
        if (!configFile.exists()) {
            throw new GradleException("Arquivo de configuração não encontrado: ${configFile.absolutePath}")
        }
        
        def parser = new XmlParser()
        def resources = parser.parse(configFile)
        
        // Buscar por string elements
        def stringElement = resources.string.find { element ->
            element.@name.equals(id)
        }
        
        if (stringElement != null) {
            def value = stringElement.text()
            println "getConfigValue($id) = '$value'"
            return value
        }
        
        // Buscar por bool elements  
        def boolElement = resources.bool.find { element ->
            element.@name.equals(id)
        }
        
        if (boolElement != null) {
            def value = boolElement.text()
            println "getConfigValue($id) = '$value' (boolean)"
            return value
        }
        
        // Não encontrado
        throw new GradleException("Configuração '$id' não encontrada no arquivo config.xml")
        
    } catch (Exception e) {
        throw new GradleException("Erro ao ler configuração '$id': ${e.message}", e)
    }
}

android {
    namespace = 'com.vinaooo.revenger'
    compileSdk 36               // Android 16 - API Level 36
    // buildToolsVersion removido - AGP 8.13.0 usa automaticamente 36.0.0

    defaultConfig {
        applicationId "com.vinaooo.revenger.${getConfigValue('config_id')}"
        minSdk 30                // Android 11 - API Level 30
        targetSdk 36             // Android 16 - API Level 36
        versionCode 1
        versionName '1.0'
        resConfigs 'en'
    }

    signingConfigs {
        debug {
            // mantenha apenas as configurações de keystore padrão
            storeFile file("${System.getProperty("user.home")}/.android/debug.keystore")
            storePassword 'android'
            keyAlias 'AndroidDebugKey'
            keyPassword 'android'
        }
        release {
            storeFile file("${rootProject.projectDir}/revenger.jks")
            storePassword 'ludere'
            keyAlias 'key0'
            keyPassword 'ludere'
        }
    }

    buildTypes {
        debug {
            debuggable = true         // Atributo, não método
            minifyEnabled = false
            shrinkResources = false
            signingConfig = signingConfigs.debug
        }
        release {
            minifyEnabled = false
            shrinkResources = false
            signingConfig = signingConfigs.release
        }
    }

    splits {
        abi {
            enable = false
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            universalApk = false
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
    }

    buildFeatures {
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }
    kotlinOptions {
        jvmTarget = '21'
    }
}

task prepareCore {
    doLast {
        for (abi in ['x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a']) {
            def jniAbiFolder = file("${rootProject.projectDir}/app/src/main/jniLibs/$abi")

            if (jniAbiFolder.exists() && jniAbiFolder.list().length > 0) {
                println "LibRetro core já existe para $abi, pulando download"
                continue
            }

            jniAbiFolder.mkdirs()
            
            def coreUrl = "https://buildbot.libretro.com/nightly/android/latest/$abi/${getConfigValue('config_core')}_libretro_android.so.zip"
            def coreName = getConfigValue('config_core')
            def zipFile = new File(jniAbiFolder, "${coreName}_libretro_android.so.zip")
            
            println "Baixando LibRetro core: $coreName para $abi"
            
            // Implementação Java nativa de download
            try {
                def url = new URL(coreUrl)
                def connection = url.openConnection()
                connection.setConnectTimeout(30000) // 30s
                connection.setReadTimeout(60000)    // 60s
                connection.setRequestProperty("User-Agent", "LibRetroDownloader/1.0")
                
                zipFile.withOutputStream { out ->
                    connection.inputStream.withCloseable { input ->
                        out << input
                    }
                }
                
                println "Download concluído: ${zipFile.length()} bytes"
                
                // Extrair ZIP
                copy {
                    from zipTree(zipFile.absolutePath)
                    into jniAbiFolder.absolutePath
                    rename "${coreName}_libretro_android.so", "libcore.so"
                }
                
                // Limpar arquivo ZIP
                zipFile.delete()
                
                println "Core $coreName extraído com sucesso para $abi"
                
            } catch (Exception e) {
                println "ERRO no download nativo: ${e.message}"
                
                // Fallback: usar método antigo se plugin disponível
                try {
                    download {
                        src coreUrl
                        dest jniAbiFolder.absolutePath
                    }
                    copy {
                        from zipTree("${jniAbiFolder.absolutePath}/${coreName}_libretro_android.so.zip")
                        into jniAbiFolder.absolutePath
                        rename "${coreName}_libretro_android.so", "libcore.so"
                    }
                    delete {
                        delete "${jniAbiFolder.absolutePath}/${coreName}_libretro_android.so.zip"
                    }
                    println "Fallback bem-sucedido para $abi"
                } catch (Exception e2) {
                    throw new GradleException("Falha no download e fallback para $abi: ${e2.message}")
                }
            }
        }
    }
}
preBuild.dependsOn prepareCore

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2'

    implementation 'androidx.core:core-ktx:1.17.0'
    implementation 'androidx.appcompat:appcompat:1.7.1'

    implementation 'androidx.activity:activity-ktx:1.11.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.9.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.9.4'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.9.4'

    // RadialGamePad - Updated to 2.0.0 with native Kotlin Flow support
    implementation 'com.github.swordfish90:radialgamepad:2.0.0'
    implementation 'com.github.swordfish90:libretrodroid:0.12.0'

    // RxJava 3 para novos códigos
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.2'
    implementation 'io.reactivex.rxjava3:rxjava:3.1.8'
    
    // Phase 9.4: SDK 36 Features - Material Design Components
    implementation 'com.google.android.material:material:1.12.0'
}
